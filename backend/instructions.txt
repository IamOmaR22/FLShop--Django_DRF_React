===========================
|||  React Setup Start  |||
===========================

Create React Application:
    $ npx create-react-app frontend  
    $ cd frontend
    $ npm start

Remove Extra Files From src Folder:
    setupTests.js
    App.css
    App.test.js

Remove Unnecessary Code From App.js. Remove code from index.css, Because i want to customize my styling.

=========================
|||  React Setup End  |||
=========================


=====================================
|||  React-Bootstrap Setup Start  |||
=====================================

Go to https://bootswatch.com/ to download css File from Theme. 
Download ==> bootstrap.min.css    --  Automatically it gives us access to different styling that bootstrap give us access to.

After Downloading bootstrap.min.css, Put bootstrap.min.css File into src Folder. Then import this into index.js file.
/// File: src/index.js
import './bootstrap.min.css'

Installing React Bootstrap:
    $ npm install react-bootstrap

===================================
|||  React-Bootstrap Setup End  |||
===================================



============================
|||  Django Setup Start  |||
============================
==========================
|||  Django Setup End  |||
==========================



====================================================
|||  Cross-Origin Resource Sharing (CORS) Start  |||
====================================================

Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any other origins (domain, scheme, or port) than its own 
from which a browser should permit loading of resources. https://pypi.org/project/django-cors-headers/

Uses:

$ pip install django-cors-headers

/// File: settings.py

INSTALLED_APPS = [
    ...
    'corsheaders',
    ...
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    ...
]


CORS_ALLOW_ALL_ORIGINS = True   # This will allow all of them.

Or

CORS_ALLOWED_ORIGINS = [        # This will allow what you wanted to allow.
    "https://example.com",
    "https://sub.example.com",
    "http://localhost:3000",  # React
    "http://127.0.0.1:9000"
]

==================================================
|||  Cross-Origin Resource Sharing (CORS) End  |||
==================================================



==================================
|||  Add a Proxy Server Start  |||
==================================

/// File: package.json

{
  "name": "frontend",
  "proxy": "http://127.0.0.1:8000",  # New Line
  .....................
  },


================================
|||  Add a Proxy Server End  |||
================================



==================================
|||  Create Redux Store Start  |||
==================================

Step - 1: Install Extension On Chrome - Redux DevTools

$ npm install redux react-redux redux-thunk redux-devtools-extension

Step - 2: Then create a file called store.js within src folder.
/// File: src/store.js
import { createStore, combineReducers, applyMiddleware } from 'redux'
import thunk from 'redux-thunk';
import { composeWithDevTools } from 'redux-devtools-extension'

const reducer = combineReducers({
    ..................,
})

const initialState = {}

const middleware = [thunk]

const store = createStore(
    reducer, 
    initialState,
    composeWithDevTools(applyMiddleware(...middleware))
)

export default store


Step - 3: Then import store into Index.js and also Import the Provider.
/// File: src/index.js
import { Provider } from 'react-redux';
import store from './store';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  .............
);

*** After that you can see the Redux store on browser. 

================================        
|||  Create Redux Store End  |||
================================



====================================================
|||  Product Constants, Reducers, Actions Start  |||
====================================================

Step - 1: Create constants folder within crc folder then create productConstants.js into constants folder. Then import this to productReducers.js. To avoid the string 
value in productReducers.
/// File: constants/productConstants.js
export const PRODUCT_LIST_REQUEST = 'PRODUCT_LIST_REQUEST'
export const PRODUCT_LIST_SUCCESS = 'PRODUCT_LIST_SUCCESS'
export const PRODUCT_LIST_FAIL = 'PRODUCT_LIST_FAIL'



Step - 2: Import constants and Create some reducers.
/// File: constants/productReducers.js
import { 
    PRODUCT_LIST_REQUEST,
    PRODUCT_LIST_SUCCESS,
    PRODUCT_LIST_FAIL,
 } from "../constants/productConstants"

export const productListReducer = (state = { products: [] }, action) => {
    switch (action.type) {
        case PRODUCT_LIST_REQUEST:
            return { loading: true, products: [] }

        case PRODUCT_LIST_SUCCESS:
            return { loading: false, products: action.payload }

        case PRODUCT_LIST_FAIL:
            return { loading: false, error: action.payload }
    
        default:
            return state
    }
}


Step - 3: Now Register productListReducer to our Store ==> store.js.
/// File: src/store.js
import { productListReducer } from './reducers/productReducers';

const reducer = combineReducers({
    productList: productListReducer,
})


Step - 4: Create actions folder within crc folder then create productActions.js into actions folder. Import this actions to the HomeScreen.js.
/// File: actions/productActions.js
import axios from "axios"

import { 
    PRODUCT_LIST_REQUEST,
    PRODUCT_LIST_SUCCESS,
    PRODUCT_LIST_FAIL,
 } from "../constants/productConstants"

export const listProducts = () => async (dispatch) => {
    try {
        dispatch({ type: PRODUCT_LIST_REQUEST })
        
        const { data } = await axios.get('/api/products/')
        
        dispatch({
            type: PRODUCT_LIST_SUCCESS,
            payload: data
        })

    } catch (error) {
        dispatch({
            type: PRODUCT_LIST_FAIL,
            payload: error.response && error.response.data.message
            ? error.response.data.message
            : error.message,
        })
    }
}


Step - 5: Now add listProducts to our Components as screens folder ==> HomeScreen.js.
/// File: screens/HomeScreen.js
import React, { useState, useEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { listProducts } from '../actions/productActions'

function HomeScreen() {
    const dispatch = useDispatch()
    const productList = useSelector(state => state.productList)
    const { error, loading, products } = productList

    useEffect(() => {

        dispatch(listProducts())

    }, [dispatch])

    return (
        ..................
    )
}

export default HomeScreen

==================================================
|||  Product Constants, Reducers, Actions End  |||
==================================================




==================================================
|||  Product Details Reducer and Action Start  |||
==================================================

Step - 1: Make some Constants in constants folder.
/// File: constants/productConstants.js
export const PRODUCT_DETAILS_REQUEST = 'PRODUCT_DETAILS_REQUEST'
export const PRODUCT_DETAILS_SUCCESS = 'PRODUCT_DETAILS_SUCCESS'
export const PRODUCT_DETAILS_FAIL = 'PRODUCT_DETAILS_FAIL'


Step - 2: Update and Create some Reducers in reducers folder.
/// File: constants/productReducers.js
import { 
    .........................,

    PRODUCT_DETAILS_REQUEST,
    PRODUCT_DETAILS_SUCCESS,
    PRODUCT_DETAILS_FAIL,
 } from "../constants/productConstants"

export const productDetailsReducer = (state = { product: { reviews: [] } }, action) => {
    switch (action.type) {
        case PRODUCT_DETAILS_REQUEST:
            return { loading: true, ...state }

        case PRODUCT_DETAILS_SUCCESS:
            return { loading: false, product: action.payload }

        case PRODUCT_DETAILS_FAIL:
            return { loading: false, error: action.payload }
    
        default:
            return state
    }
}


Step - 3: Now Register productDetailsReducer to our Store ==> store.js.
/// File: src/store.js
import { ......., productDetailsReducer } from './reducers/productReducers';

const reducer = combineReducers({
    ..........................,
    productDetails: productDetailsReducer,
})

Step - 4: Create an Actions in actions folder. We want to update that states and then call it within our component here.
/// File: actions/productActions.js
import axios from "axios"

import { 
    ...............,

    PRODUCT_DETAILS_REQUEST,
    PRODUCT_DETAILS_SUCCESS,
    PRODUCT_DETAILS_FAIL,
 } from "../constants/productConstants"


export const listProductDetails = (id) => async (dispatch) => {
    try {
        dispatch({ type: PRODUCT_DETAILS_REQUEST })
        
        const { data } = await axios.get(`/api/products/${id}`)
        
        dispatch({
            type: PRODUCT_DETAILS_SUCCESS,
            payload: data
        })

    } catch (error) {
        dispatch({
            type: PRODUCT_DETAILS_FAIL,
            payload: error.response && error.response.data.message
            ? error.response.data.message
            : error.message,
        })
    }
}


Step - 5: Now add listProductDetails to our Components as screens folder ==> ProductScreen.js.
/// File: screens/ProductScreen.js
import React, { useState, useEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { listProductDetails } from '../actions/productActions'

function ProductScreen({ match }) {
    const dispatch = useDispatch()
    const productDetails = useSelector(state => state.productDetails)  // productDetails from Redux Store ==> store.js
    const { loading, error, product } = productDetails  // Destructure this to get the data.

    useEffect(() => {

        dispatch(listProductDetails(match.params.id))

    }, [dispatch, match])

    return (
        .............
    )
}

export default ProductScreen

================================================
|||  Product Details Reducer and Action End  |||
================================================



====================================
|||  JWT - JSON Web Token Start  |||
====================================

Step - 1: Installation

    $ pip install djangorestframework-simplejwt

Step - 2: Write this under the INSTALLED_APPS = []
/// File: settings.py

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

Step - 3: In root urls, I have put path('api/', include('base.urls')),
/// File: base/urls.py

from rest_framework_simplejwt.views import (
    TokenObtainPairView,
)

urlpatterns = [
    path('users/login/', TokenObtainPairView.as_view(), name='token_obtain_pair'),  # This will be http://127.0.0.1:8000/api/users/login/
    ......................,
]


Step - 4: Some of Simple JWT’s behavior can be customized through settings variables in settings.py: Put it under REST_FRAMEWORK = {}
/// File: settings.py
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    # 
    'SIGNING_KEY': settings.SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}


## -- ## JWT Customization For User Information ## -- ##

/// File: base/views.py
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from rest_framework_simplejwt.views import TokenObtainPairView

class MyTokenObtainPairSerializer(TokenObtainPairSerializer):
    @classmethod
    def get_token(cls, user):
        token = super().get_token(user)

        # Add custom claims
        token['username'] = user.username
        token['message'] = 'Hello World'
        # ...

        return token

class MyTokenObtainPairView(TokenObtainPairView):
    serializer_class = MyTokenObtainPairSerializer

/// File: base/urls.py
from . import views
# from rest_framework_simplejwt.views import (
#     TokenObtainPairView,
# )

urlpatterns = [
    path('users/login/', views.MyTokenObtainPairView.as_view(), name='token_obtain_pair'),
    # path('users/login/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    ..............................,
]


/// File: base/views.py   --- Do this when you want to see the user info from frontend(DRF browser page)
class MyTokenObtainPairSerializer(TokenObtainPairSerializer):

    def validate(self, attrs):
        data = super().validate(attrs)

        data['username'] = self.user.username
        data['email'] = self.user.email
    
        return data

==================================
|||  JWT - JSON Web Token End  |||
==================================




===============================
|||  User Serializer Start  |||
===============================

/// File: base/serializers.py
from django.contrib.auth.models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email']


/// File: base/views.py
from . serializers import .........., UserSerializer

@api_view(['GET'])
def getUserProfile(request):
    user = request.user
    serializer = UserSerializer(user, many=False)  # Single use that's why False
    return Response(serializer.data)


/// File: base/urls.py
urlpatterns = [
    .......................,
    path('users/profile/', views.getUserProfile, name='users-profile'),
    .......................,
]

Then Go to Postman add Headers for Authorization.

## -- ## -- ## Customize the User model ## -- ## -- ##
/// File: base/serializers.py
class UserSerializer(serializers.ModelSerializer):
    name = serializers.SerializerMethodField(read_only=True)
    _id = serializers.SerializerMethodField(read_only=True)
    isAdmin = serializers.SerializerMethodField(read_only=True)
    class Meta:
        model = User
        fields = ['id', '_id', 'username', 'email', 'name', 'isAdmin']
    
    def get__id(self, obj):  # Double underscore id because my id already contains underscore.
        return obj.id

    def get_isAdmin(self, obj):
        return obj.is_staff

    def get_name(self, obj):  # self is the serializer and obj is the user.
        name = obj.first_name
        if name == '':  # When user has no name.
            name = obj.email

        return name


## -- ## -- ## Added Another Token For User ## -- ## -- ##
/// File: base/serializers.py
from rest_framework_simplejwt.tokens import RefreshToken

class UserSerializerWithToken(UserSerializer):  # Extends the UserSerializer
    token = serializers.SerializerMethodField(read_only=True)
    class Meta:
        model = User
        fields = ['id', '_id', 'username', 'email', 'name', 'isAdmin', 'token']

    def get_token(self, obj):
        token = RefreshToken.for_user(obj)
        return str(token.access_token)

/// File: base/views.py
from . serializers import .............., UserSerializerWithToken

class MyTokenObtainPairSerializer(TokenObtainPairSerializer):

    def validate(self, attrs):
        data = super().validate(attrs)

        serializer = UserSerializerWithToken(self.user).data

        for k, v in serializer.items():  # key, value
            data[k] = v
    
        return data

*** It will give a token. Previous token and this token both hold the same data.

=============================
|||  User Serializer End  |||
=============================


============================================
|||  Signals and Login With Email Start  |||
============================================

Step - 1: Create a file called signals.py within base app.

/// File: base/signals.py
from django.db.models.signals import pre_save
from django.contrib.auth.models import User


def updateUser(sender, instance, **kwargs):
    print('Signal Triggered')

pre_save.connect(updateUser, sender=User)

/// File: base/apps.py
class BaseConfig(AppConfig):
    ..................

    def ready(self):
        import base.signals   # Must register app like this in settings.py 'base.apps.BaseConfig',

*** After doing this, Let's save one created user from admin panel. You can see the Signal Triggered on Console.


/// File: base/signals.py
def updateUser(sender, instance, **kwargs):
    # print('Signal Triggered')
    user = instance
    if user.email != '':
        user.username = user.email

pre_save.connect(updateUser, sender=User)

==========================================
|||  Signals and Login With Email End  |||
==========================================

I have shifted all the urls to base=>urls(Folder)
I have shifted all the views to base=>views(Folder)



=======================================================
|||  Merging React Files With Django Project Start  |||
=======================================================

### Step - 1: Move frontend folder to backend folder  ###
--- Cut frontend folder and paste it inside backend folder

### Step - 2: Get all Django files or React files and Turn them into static assets ###
--- cd frontend
--- npm run build

My entire project now sits in the file called index.html -- frontend/build/index.html

### Step - 3: Point Django Project To index.html ###
--- Go to settings.py and urls.py
/// File: settings.py
TEMPLATES = [
    {
        .....................,
        'DIRS': [
            os.path.join(BASE_DIR, 'frontend/build')
        ],
        .....................,
    },
]

/// File: urls.py
from django.views.generic import TemplateView

urlpatterns = [
    ..........................,
    path('', TemplateView.as_view(template_name='index.html')),  # This path will render the React project.
    ..........................,
]

/// File: settings.py
STATICFILES_DIRS = [
    ................,
    BASE_DIR / 'frontend/build/static'
]

--- cd backend
--- python manage.py runserver

Now you can see the full project on http://127.0.0.1:8000/

=====================================================
|||  Merging React Files With Django Project End  |||
=====================================================
